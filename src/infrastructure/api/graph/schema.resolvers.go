package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.46

import (
	"context"
	"fmt"

	"github.com/chack-check/organizations-service/domain/membership"
	"github.com/chack-check/organizations-service/domain/organizations"
	"github.com/chack-check/organizations-service/infrastructure/api/factories"
	"github.com/chack-check/organizations-service/infrastructure/api/graph/model"
	"github.com/chack-check/organizations-service/infrastructure/api/middlewares"
	"github.com/chack-check/organizations-service/infrastructure/api/utils"
	"github.com/chack-check/organizations-service/infrastructure/database"
	"github.com/chack-check/organizations-service/infrastructure/events"
	"github.com/chack-check/organizations-service/infrastructure/subscriptions"
	"github.com/golang-jwt/jwt/v5"
)

// CreateOrganization is the resolver for the createOrganization field.
func (r *mutationResolver) CreateOrganization(ctx context.Context, data model.CreateOrganizationData) (model.OrganizationErrorResposne, error) {
	token, _ := ctx.Value("token").(*jwt.Token)
	if err := utils.UserRequired(token); err != nil {
		return model.ErrorResponse{Message: "Token required"}, nil
	}

	tokenSubject, err := middlewares.GetTokenSubject(token)
	if err != nil {
		return model.ErrorResponse{Message: "Incorrect token"}, nil
	}

	handler := organizations.NewCreateOrganizationHandler(
		database.DatabaseOrganizationsAdapter{},
		events.OrganizationEventsAdapter{},
		database.DatabaseRolesAdapter{},
		database.DatabaseFilesAdapter{},
		subscriptions.SubscriptionsAdapter{},
	)
	organization, err := handler.Execute(tokenSubject.UserId, factories.CreateOrganizationDataToModel(data))
	if err != nil {
		return model.ErrorResponse{Message: err.Error()}, nil
	}

	response := factories.OrganizationModelToResponse(*organization)
	return &response, nil
}

// CreateRole is the resolver for the createRole field.
func (r *mutationResolver) CreateRole(ctx context.Context, organizationID int, roleData model.CreateRoleData) (model.RoleErrorResponse, error) {
	panic(fmt.Errorf("not implemented: CreateRole - createRole"))
}

// HasOrganizations is the resolver for the hasOrganizations field.
func (r *queryResolver) HasOrganizations(ctx context.Context) (model.HasOrganizationsErrorResponse, error) {
	token, _ := ctx.Value("token").(*jwt.Token)
	if err := utils.UserRequired(token); err != nil {
		return model.ErrorResponse{Message: "Token required"}, nil
	}

	tokenSubject, err := middlewares.GetTokenSubject(token)
	if err != nil {
		return model.ErrorResponse{Message: "Incorrect token"}, nil
	}

	handler := organizations.NewHasUserOrganizationsHandler(
		database.DatabaseOrganizationsAdapter{},
	)
	hasOrganizations := handler.Execute(tokenSubject.UserId)
	response := model.HasOrganizationsResponse{HasOrganizations: hasOrganizations}
	return &response, nil
}

// GetMyOrganizations is the resolver for the getMyOrganizations field.
func (r *queryResolver) GetMyOrganizations(ctx context.Context) (model.OrganizationsArrayErrorResponse, error) {
	token, _ := ctx.Value("token").(*jwt.Token)
	if err := utils.UserRequired(token); err != nil {
		return model.ErrorResponse{Message: "Token required"}, nil
	}

	tokenSubject, err := middlewares.GetTokenSubject(token)
	if err != nil {
		return model.ErrorResponse{Message: "Incorrect token"}, nil
	}

	handler := organizations.NewGetUserOrganizationsHandler(
		database.DatabaseOrganizationsAdapter{},
	)
	organizations := handler.Execute(tokenSubject.UserId)
	var responseOrganizations []*model.Organization
	for _, organization := range organizations {
		response := factories.OrganizationModelToResponse(organization)
		responseOrganizations = append(responseOrganizations, &response)
	}

	response := model.OrganizationsArray{Organizations: responseOrganizations}
	return &response, nil
}

// GetOrganizationRoles is the resolver for the getOrganizationRoles field.
func (r *queryResolver) GetOrganizationRoles(ctx context.Context, organizationID int) (model.RolesArrayErrorResponse, error) {
	token, _ := ctx.Value("token").(*jwt.Token)
	if err := utils.UserRequired(token); err != nil {
		return model.ErrorResponse{Message: "Token required"}, nil
	}

	tokenSubject, err := middlewares.GetTokenSubject(token)
	if err != nil {
		return model.ErrorResponse{Message: "Incorrect token"}, nil
	}

	handler := membership.NewGetOrganizationRolesHandler(
		database.DatabaseOrganizationsAdapter{},
		database.DatabaseRolesAdapter{},
	)
	roles := handler.Execute(tokenSubject.UserId, organizationID)
	var responseRoles []*model.Role
	for _, role := range roles {
		response := factories.RoleModelToResponse(role)
		responseRoles = append(responseRoles, &response)
	}

	response := model.RolesArray{Roles: responseRoles}
	return &response, nil
}

// GetPermissions is the resolver for the getPermissions field.
func (r *queryResolver) GetPermissions(ctx context.Context) (model.PermissionsArrayErrorResponse, error) {
	panic(fmt.Errorf("not implemented: GetPermissions - getPermissions"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
