// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type HasOrganizationsErrorResponse interface {
	IsHasOrganizationsErrorResponse()
}

type OrganizationErrorResposne interface {
	IsOrganizationErrorResposne()
}

type OrganizationsArrayErrorResponse interface {
	IsOrganizationsArrayErrorResponse()
}

type PermissionsArrayErrorResponse interface {
	IsPermissionsArrayErrorResponse()
}

type RoleErrorResponse interface {
	IsRoleErrorResponse()
}

type RolesArrayErrorResponse interface {
	IsRolesArrayErrorResponse()
}

type CreateOrganizationData struct {
	Title          string         `json:"title"`
	Description    string         `json:"description"`
	InviteTemplate *string        `json:"inviteTemplate,omitempty"`
	Avatar         *UploadingFile `json:"avatar,omitempty"`
}

type CreateRoleData struct {
	Code        string   `json:"code"`
	Name        string   `json:"name"`
	Permissions []string `json:"permissions"`
}

type ErrorResponse struct {
	Message string `json:"message"`
}

func (ErrorResponse) IsHasOrganizationsErrorResponse() {}

func (ErrorResponse) IsOrganizationErrorResposne() {}

func (ErrorResponse) IsRoleErrorResponse() {}

func (ErrorResponse) IsOrganizationsArrayErrorResponse() {}

func (ErrorResponse) IsRolesArrayErrorResponse() {}

func (ErrorResponse) IsPermissionsArrayErrorResponse() {}

type HasOrganizationsResponse struct {
	HasOrganizations bool `json:"hasOrganizations"`
}

func (HasOrganizationsResponse) IsHasOrganizationsErrorResponse() {}

type Member struct {
	UserID      int           `json:"userId"`
	Role        *Role         `json:"role"`
	Permissions []*Permission `json:"permissions"`
}

type Mutation struct {
}

type Organization struct {
	ID                 int        `json:"id"`
	Title              string     `json:"title"`
	Description        string     `json:"description"`
	MaxMembersCount    int        `json:"maxMembersCount"`
	MaxGroupChatsCount int        `json:"maxGroupChatsCount"`
	InviteTemplate     *string    `json:"inviteTemplate,omitempty"`
	Members            []*Member  `json:"members"`
	OwnerID            int        `json:"ownerId"`
	Avatar             *SavedFile `json:"avatar,omitempty"`
}

func (Organization) IsOrganizationErrorResposne() {}

type OrganizationsArray struct {
	Organizations []*Organization `json:"organizations"`
}

func (OrganizationsArray) IsOrganizationsArrayErrorResponse() {}

type Permission struct {
	Code     string              `json:"code"`
	Name     string              `json:"name"`
	Category *PermissionCategory `json:"category,omitempty"`
}

type PermissionCategory struct {
	Name string `json:"name"`
	Code string `json:"code"`
}

type PermissionsArray struct {
	Permissions []*Permission `json:"permissions"`
}

func (PermissionsArray) IsPermissionsArrayErrorResponse() {}

type Query struct {
}

type Role struct {
	ID          int           `json:"id"`
	Code        string        `json:"code"`
	Name        string        `json:"name"`
	Permissions []*Permission `json:"permissions"`
}

func (Role) IsRoleErrorResponse() {}

type RolesArray struct {
	Roles []*Role `json:"roles"`
}

func (RolesArray) IsRolesArrayErrorResponse() {}

type SavedFile struct {
	OriginalURL       string  `json:"originalUrl"`
	OriginalFilename  string  `json:"originalFilename"`
	ConvertedURL      *string `json:"convertedUrl,omitempty"`
	ConvertedFilename *string `json:"convertedFilename,omitempty"`
}

type UploadingFile struct {
	Original  *UploadingFileMeta `json:"original"`
	Converted *UploadingFileMeta `json:"converted,omitempty"`
}

type UploadingFileMeta struct {
	URL            string          `json:"url"`
	Filename       string          `json:"filename"`
	Signature      string          `json:"signature"`
	SystemFiletype SystemFiletypes `json:"systemFiletype"`
}

type SystemFiletypes string

const (
	SystemFiletypesAvatar     SystemFiletypes = "avatar"
	SystemFiletypesFileInChat SystemFiletypes = "file_in_chat"
)

var AllSystemFiletypes = []SystemFiletypes{
	SystemFiletypesAvatar,
	SystemFiletypesFileInChat,
}

func (e SystemFiletypes) IsValid() bool {
	switch e {
	case SystemFiletypesAvatar, SystemFiletypesFileInChat:
		return true
	}
	return false
}

func (e SystemFiletypes) String() string {
	return string(e)
}

func (e *SystemFiletypes) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SystemFiletypes(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SystemFiletypes", str)
	}
	return nil
}

func (e SystemFiletypes) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
